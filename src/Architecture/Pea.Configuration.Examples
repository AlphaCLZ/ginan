

/** \file

Examples of basic `pea` use-cases and configuration file templates for their use.

*/

/** Ionosphere-free PPP with floating ambiguities.

Ionosphere-free combinations allow some atmospheric effects and biases to be eliminated from calculations, providing a simplified estimation model.
As the end-user processing mode cannot calculate satellite states, the satellite position and clock offset needs to be provided externally.

Here the yaml configures the software to process data with an `epoch_interval` of 30s. Higher and lower intervals may be set to use more or less of the input observations.

Precision inputs are supplied to ensure the best possible PPP processing:

The PEA supports SP3 formatted satellite position inputs, specified in `sp3_files`, and RINEX clock files, `clk_files`. 

ANTEX files, with antenna information for both stations and satellites should be provided in `atx_files` 

SINEX files, with station antennas should be provided in `snx_files`

If no precise ephemerides (SP3/CLK) are available, RINEX 3.XX navigation files, with broadcast clocks should be provided in `nav_files`

BLQ formatted ocean tide loading parameters for each station should be provided in `blq_files` if available to correct for OTL, otherwise `processing_options: tide_otl` should be set to `false`.

RINEX 3.XX observation files for the network stations are provided in `gnss_observations: rnx_files`

The constellations to be used in processing can be specified by setting the `processing_options: gnss_general: sys_options: XXX: process:` option `true` for each system `XXX` (GPS/GLO/GAL/BDS)
          
This example demonstrates a static receiver with 0 process noise. 
The tracking of a moving receiver can be done by setting the `estimation_parameters: stations: pos: proc_noise` parameter to the maximum expected velocity.
Smoothness of velocity can also be achieved by setting `estimation_parameters: stations: pos_rate: estimate` to `[true]`.

Tropospheric delays are estimated as a combination of hydrostatic and wet components, each component is in turn estimated as the products of the zenith delay and a mapping function.
If `estimation_parameters: stations: trop: estimate` is set to `[true]`, the PEA estimates the zenith wet delay.
If `estimation_parameters: stations: trop_grad: estimate` is set to `[true]`, the PEA also estimates azimuthal components of tropospheric mapping functions.

The hydrostatic zenith delays and elevation dependent component of mapping functions are calculated based on pre-defined models.
Available models, which can be selected using the `processing_options: troposphere: model` parameter, are the GPT2 and VMF3 models.
If using the GPT2 model the path to the necessary grid file needs to be specified in  `inputs: troposphere: gpt2grid_files`

If using the VMF3 model, the tropospheric parameters corresponding to the observation times need to be provided in a directory specified by `inputs: troposphere: vmf3_directory`, and the orography file for atmospheric circulation models need to be specified in `inputs: troposphere: orography_files`

`ex11_pea_pp_user_gps.yaml`

\include "ex11_pea_pp_user_gps.yaml"

 */
example Ex11()
{
	Pea_Configuration();
}



/** Ionosphere-free receiver positioning for multiple GNSS systems.

This example is largely the same as the previous, however the galileo system is also enabled by setting `processing_options: gnss_general: sys_options: gal: process: true`

`ex12_pea_pp_user_gnss.yaml`
 
\include "ex12_pea_pp_user_gnss.yaml"

 */
example Ex12()
{
	Pea_Configuration();
}



/** Single-frequency user-mode positioning.

Single-frequency positioning enables low-cost receivers that do not output observations on a secondary frequency to utilise atmospheric products and estimate precise positions.

It is possible to perform end user PPP processing using single frequency data (although at reduced accuracy) by providing external Ionospheric delay data.

The PEA currently uses IONEX formatted VTEC maps as Ionosphere delay data. 
The path to the IONEX file needs to be specified in `ion_files`

In order for the PEA to use the VTEC maps, the `processing_options: ionosphere: corr_mode` parameter should to be set to `total_electron_content`

If provided separately, files containing the satellite DCB (either RINEX DCB or bias SINEX) should be specified in `dcb_files` or `bsx_files` 

`ex13_pea_pp_user_gps_sf.yaml`

\include "ex13_pea_pp_user_gps_sf.yaml"

 */
example Ex13()
{
	Pea_Configuration();
}



/** Dual frequency PPP with ambiguity resolution

The PEA (in both network and user processing modes) can be specified to perform ambiguity resolution in an attempt to improve accuracy and convergence times.

In aside from the requirements for floating PPP ambiguities, information on satellite hardware biases needs to be provided order to allow correct ambiguity resolution in end user PEA processing.

For post-process, the PEA use bias SINEX formatted files as input channels for satellite hardware biases.
The bias SINEX file can be specified in `bsxfiles`.

The ambiguity resolution process is controlled by the `ambiguity_resolution_options` field.
Currently ambiguity resolution is only supported for GPS and Galileo satellites. 

Ambiguity resolution for a system  can be activated by setting the `ambiguity_resolution` parameter to `true` within its `sys_options` fields.

In addition the ambiguity resolution algorithm needs to be specified for both the wide-lane ambiguity (`WL_mode`) and narrow-lane ambiguities (`NL_mode`)

For best results, `round` or `iter_rnd` are recommended for Wide-lane ambiguities and `lambda_alt` or `lambda_bie` is recommended for narrow-lane ambiguities.

`ex14_pea_pp_user_gnss_ar.yaml`
 
\include "ex14_pea_pp_user_gnss_ar.yaml"

 */
example Ex14()
{
	Pea_Configuration();
}



/** Real-time PPP and RTCM

The PEA can be used to process GNSS data in real-time, or from RTCM files saved to disk.

Real-time processing will make use of RTCM formatted streams for receiver observables and satellite data.

Satellite positions needs to be provided using (predicted) SP3 files or using real-time streams (broadcast + SSR corrections).

In the `processing_options` field, the `ppp_ephemeris` parameter needs to be set to `precise` if using SP3 files and `ssr` if using SSR correction streams.


### Real-time Streams

This example is configured for using stored RTCM messages, but can be edited to use realtime streams by uncommenting the parameters in `gnss_observations` and `satellite_data`

Currently the PEA can only get real-time data by connecting to an NTRIP caster.

An example of such a caster, can be accessed by registering at https://www.auscors.ga.gov.au/

You can test your username and password is working correctly by running the curl command:

	curl https://ntrip.data.gnss.ga.gov.au/ALIC00AUS0 -H "Ntrip-Version: NTRIP/2.0" -i  --output - -u <user>


	
The host name, user name and password corresponding to the NTRIP can be specified under `gnss_observations: root_stream_url` using the format `http(s)://<USER>:<PASSWORD>@hostname/`
The username and password can use the the tags shown, and be passed in via the command line with `-u`, `-p`, or they can be hard-coded within the yaml file.
Alternatively the mountpoints can be specified using the full path `http(s)://user:password@hostname/mountpoint`, leaving the `root_stream_url` field empty,  this allows to use streams from multiple NTRIP casters.

The mountpoint corresponding to station observables can then be listed under `gnss_observations: streams`

Ephemeris streams (broadcast ephemeris and SSR corrections) can be listed under `satellite_data: streams`

When SSR corrections are used for ephemerides, the `ssr_antenna_offset` parameter needs to be specified to clarify whether the streams are reporting phase center positions, or center of mass positions.

The PEA support MSM4, MSM5, MSM6 and MSM7 messages for observations, and orbit and clock messages, code bias messages and phase bias messages for GPS and Galileo.


In this example the streams are being obtained from the auscors caster run by Geoscience Australia. 
The broadcast information is being obtained from the stream `BCEP00BKG0` being supplied by BKG, and corrections to the utlra-rapid predicted orbit are being obtained from the stream `SSRA00CNE0`. 
The real-time data being processed is for the continuous GNSS station located at Alice Springs obtained from the stream `ALIC00AUS0`.

	
### Processing timing and synchronisation

When processing in real-time, with latency between reception of messages from different stations, the synchonisation of observations becomes important.

Within the `epoch_control:` block, the `epoch_interval` is used to set the update interval as per usual, however the `wait_next_epoch` and `wait_all_stations` parameters help synchronise station streams.

The PEA will wait for `wait_next_epoch` seconds from the start of the previous epoch for the first observation to arrive (and skip the current epoch if no observations arrive).

The PEA will wait for `wait_all_stations` seconds from the first observation for data from other stations before processing.

	

`ex15_pea_rt_user_gnss_ar.yaml`
 
\include "ex15_pea_rt_user_gnss_ar.yaml"

 */
example Ex15()
{
	Pea_Configuration();
}



/** Post process estimation of atmospheric delays

The PEA is capable of estimation both Tropospheric and Ionospheric delays on GNSS signals.
Tropospheric delays can be estimated both in network (`processing_options: process_modes: network: true`) and end-user (`processing_options: process_modes: user: true`) modes. 

Ionosphere delay estimation and mapping is activated by setting `processing_options: process_modes: ionosphere` to `true`.

Two types of Ionosphere delay estimates are supported by PEA. 
If all other parameters in the `processing_options: process_modes` field are set to `false` then the Ionospheric delay are estimated based on carrier smoothed pseudoranges.
If in addition to `processing_options: process_modes: ionosphere`, `processing_options: process_modes: network` is set to true, the PEA will attempt to calculate Ionospheric delay measurements from ambiguity resolved carrier phase measurements. For this mode to work, the parameters in the `ambiguity_resolution_options` field needs to be set properly.
Ionospheric delay estimate are available for GPS signals only.

The Ionosphere slant delay measurements delay measurements can be outputted into STEC files if `outputs: ionstec: output` parameter is set to `true` 

The format of STEC files have one of two forms. If the vector in `gnss_models: ionospheric_model: layer_heights` is not empty, each line on the STEC file will contain the slant delay measurements and the piercing points at each layer height:

    #IONO_MEA, 2102,171000.000, AGGO, G05, -1.6030, 1.9699e-04, 2, 1, 350, -33.662, -61.955, 1.443

the fields representing, from left to right:

1. `IONO_MEA` label
2. GPS week
3. GPS TOW in seconds
4. Receiver/station name
5. Satellite ID
6. Slant delay in meters
7. Slant delay variance in meters$^2$
8. Number of Ionosphere layers N
9. N fields containing: 
    a. Height of layer in Km
    b. Latitude of piercing point (in degrees)
    c. Longitude of piercing point (in degrees)
    d. Slant to vertical mapping function

If the layer heights field is empty the "Number of Ionosphere layers" field will be 0 and followed by the receiver position in ECEF, and the satellite position in ECEF.

Vertical TEC (VTEC) maps can be estimated from the slant delay measurements and output as IONEX formatted maps ( `output_files: output_ionex: true`) and its corresponding DCB ( `output_files: output_biasSINEX: true`).

Ionosphere mapping and output are controlled by parameters in the `ionosphere_filter_parameters` field.
Currently only spherical harmonics based mapping is supported by the PEA `model = spherical_harmonic`, setting  `ionosphere_filter_parameters: model` to `meas_out` will output the ionosphere measurements but will not perform mapping. 

If spherical harmonics is selected as mapping method, the ionospheric delays will be mapped into multiple thin layer shells.
The height of the shells can be set in the `ionosphere_filter_parameters: layer_heights` vector.

The VTEC at each layer will be fit to spherical harmonic components, with a maximum order and degree of  `ionosphere_filter_parameters: func_order`.
If  `output_files: output_ionex` is set to `true` the Ionosphere map will be outputted in IONEX 1.11 format.

The area of the IONEX map can be set using the `lat_center`, `lon_center`,  `lat_width`, `lon_width` parameters.
The horizontal resolution of the IONEX map can be set using the `lat_res`, `lon_res` parameters.
The temporal resolution of the IONEX file is defined by the `time_res` parameter.

This configuration file can be used to generate a single layer IONEX map and accompanying biasSINEX file from smoothed pseudorange observations.


`ex16_pea_pp_ionosphere.yaml`
 
\include "ex16_pea_pp_ionosphere.yaml"

 */
example Ex16()
{
	Pea_Configuration();
}



/** Satellite clock, bias, and orbit estimation, Minimum-constraints, network-Mode
 
 
 
## Processing a Global Network to Adjust Satellite Positions

PEA is currently designed to use integrated/predicted satellite positions for its real-time network processing mode, thus all satellite position corrections can only be made in post process mode.

A basic example for PEA network processing is provided here. 

In order to activate estimation of satellite position corrections the entry `estimation_parameters: satellites: orb: estimated` needs to be set to `[true]`.

It will also require an ICF file, generated by POD in orbit fitting mode, as input. The path to such file should be given in `orb_files` entry.

The main output of this processing mode would be an ICF formatted file containing the corrected initial conditions for each of the processed satellites. 
The file will be created in the same path as the input ICF file with the `_pea` suffix attached. 
This file can be used by the POD to integrate/predict the satellite positions over the required time window.

Receiver/station positions can also be estimated as part of the network processing. 
In order to estimate station positions, the parameter `estimation_parameters: stations: pos: estimated` and `output_files: sinex: output` need to be set to `true`
A SINEX formatted file with the estimated station position will be generated in the path specified.

## Post process estimation of Satellite clocks and biases

The example configuration file shown corresponds to a post-mission network processing mode for GPS satellite clocks.

The required input files are similar to the satellite position estimation example.
The main difference will be that SP3 formatted files can be used as input for satellite position (POD generated ICF files can also be used).

The frequency in which the GNSS parameter are estimated, including satellite and receiver clocks, should be set by the `epoch_interval` parameter.
 
In order to estimate the satellite and receiver hardware biases, the ambiguities need to be separated from the biases and resolved to integer values. 

In order to perform ambiguity resolution, the proper parameters needs to be set on the `ambiguity_resolution` fields. 

The target constellations need to be selected by setting `GPS_amb_resol` and/or `GAL_amb_resol` to true (only GPS and GAL constellation are supported in the current version). 

Both `WL_mode` and `NL_mode` needs to be set to something different than `off`. 

It is advised that `round` or `iter_rnd` be used for network processing. 

In order to output the estimated biases the parameter `output_files: output_biasSINEX` needs to be to `true` and `ambiguity_resolution_options: bias_output_rate` set to a number (of seconds) different than zero.
The satellite biases will then be output to a bias SINEX formatted file specified in `output_files: biasSINEX_filename`.

Receiver biases are also estimated by the process, however they are not reflected on the output files.



## Minimal constraints transformation.

If minimum constraints is enabled, a rigid transformation between the estimated and apriori positions will be applied after the completion of all forward processing, and configured according to the yaml file.
Here the module is enabled, and both `translation` and `rotation` are set `estimated: [true]`, and `scale_by_vcv` is used to weight station positions according to their estimated covariance.

`ex17_pea_pp_netw_gnss_ar.yaml`
 
\include "ex17_pea_pp_netw_gnss_ar.yaml"

 */
example Ex17()
{
	Pea_Configuration();
}






/** Real-time estimation of Satellite clocks and biases

This example is an extension of the realtime user example, converted to network PPP mode, and with configuration for outputs of streams.

The estimated clock and bias can be output to an NTRIP caster (as well as to local files). 

The output NTRIP caster streams need to be specified using the `streams` field in the `outputs:` block
The host name, user name and password can be set in the `root_stream_url` parameter.

Once the label is created, the mountpoint and RTCM messages to encode can be specified in the `output_streams: label` field.

Currently the PEA supports output for GPS and Galileo orbits and clock messages (1060 and 1243), code bias (1059 and 1243) and phase bias (1265 and 1267).

The uploading of corrections requires the use of `mongo`, which needs to be installed and configured within the yaml(s)

It also requires specification of the `ssr_corrections` block, which identifies the source of the corrections that will be uploaded.


`ex18_pea_rt_netw_gnss_ar.yaml`
 
\include "ex18_pea_rt_netw_gnss_ar.yaml"

 */
example Ex18()
{
	Pea_Configuration();
}



